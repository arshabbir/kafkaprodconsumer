// Code generated by MockGen. DO NOT EDIT.
// Source: alarmservice.go

// Package alarmservicemock is a generated GoMock package.
package alarmservicemock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAlarmService is a mock of AlarmService interface
type MockAlarmService struct {
	ctrl     *gomock.Controller
	recorder *MockAlarmServiceMockRecorder
}

// MockAlarmServiceMockRecorder is the mock recorder for MockAlarmService
type MockAlarmServiceMockRecorder struct {
	mock *MockAlarmService
}

// NewMockAlarmService creates a new mock instance
func NewMockAlarmService(ctrl *gomock.Controller) *MockAlarmService {
	mock := &MockAlarmService{ctrl: ctrl}
	mock.recorder = &MockAlarmServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlarmService) EXPECT() *MockAlarmServiceMockRecorder {
	return m.recorder
}

// StartConsumer mocks base method
func (m *MockAlarmService) StartConsumer(status chan int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartConsumer", status)
}

// StartConsumer indicates an expected call of StartConsumer
func (mr *MockAlarmServiceMockRecorder) StartConsumer(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsumer", reflect.TypeOf((*MockAlarmService)(nil).StartConsumer), status)
}

// Produce mocks base method
func (m *MockAlarmService) Produce() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Produce")
}

// Produce indicates an expected call of Produce
func (mr *MockAlarmServiceMockRecorder) Produce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockAlarmService)(nil).Produce))
}

// Check mocks base method
func (m *MockAlarmService) Check() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(int)
	return ret0
}

// Check indicates an expected call of Check
func (mr *MockAlarmServiceMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockAlarmService)(nil).Check))
}
